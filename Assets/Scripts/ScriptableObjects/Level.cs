using UnityEngine;

[CreateAssetMenu(fileName = nameof(Level), menuName = nameof(ScriptableObject) + " / " + nameof(Level))]
public sealed class Level : ScriptableObject
{ 
    [field: SerializeField] public int StartTime { get; private set; }
    //[field: SerializeField] public 
}

// Хранить спрайты не в словаре, хранить в скиптаблах пути, спрайты в атласе (После среды)

// Передача сигналов,
// Универсальная система событий бессмысленна
// Специфичная для каждого тоже так себе
// Reactive properties ++
// Наблюдатели это нормальный подход
// Проверка состояния объекта

// Когда видишь конечный результат можно сделать монолит, но это не наш случай
// Бизнес планирует реворк, это нормально
// Не можем сделать сразу, сделаем как умеем, потом переделаем

// Чтобы создать структурный подход нужно понемать что хотим получить  

// Модель данных, пропускается через системы
// Модель совокупных данных
// Упрощенный ECS
// Минус порядок выполнения систем, плюс расширяемость просто пишем новую систему. Как Цепочка обязанностей. 

// Мастер - работоспособный билд, залив после майлстоунов
// Разработка в Ворк - корень. Заливает один, через ревью
// Qa - отдельная от ворк, тестируют. Нашли баг, пишут тикет.
// Разраб от вокр делает ветку от qa, фиксит, проверяем, мерджим в ворк

// Норма когда делаем фичу, залили в ворк и что то отламалось, выяснится на тестировании.

// Использовать Интерфейсы везде где можно.
// DI(Я бы с радостью, но уже нет),
// Декомпозиция классов на маленькие классы
// Разделяем разделяем и разделяем! ++ 

// Любой Код который мы пишем должен быть покрыт Unit Test'ами 
// Нет правильного и неправильного подхода. Есть подход который позволяет зарабатывать деньги